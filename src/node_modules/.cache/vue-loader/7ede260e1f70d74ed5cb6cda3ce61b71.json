{"remainingRequest":"D:\\MyWork\\test-form\\project\\test5\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\MyWork\\test-form\\project\\test5\\src\\components\\Timer.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\MyWork\\test-form\\project\\test5\\src\\components\\Timer.vue","mtime":1551030408935},{"path":"D:\\MyWork\\test-form\\project\\test5\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyWork\\test-form\\project\\test5\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\MyWork\\test-form\\project\\test5\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\MyWork\\test-form\\project\\test5\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  data() {\r\n    return {\r\n      timeToTest: this.minute * 60,\r\n      timerId: '',\r\n    }\r\n  },\r\n  computed: {\r\n    timerStr() {\r\n      let minutes = parseInt(this.timeToTest / 60, 10)\r\n      let seconds = parseInt(this.timeToTest % 60, 10);\r\n\r\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n      let result = minutes + \":\" + seconds;\r\n\r\n      return result;\r\n    }\r\n  },\r\n  props: {\r\n    minute: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    autoStart: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  methods: {\r\n    startTimer() {\r\n      var self = this;\r\n      this.timeToTest = this.minute * 60;\r\n      var display = document.querySelector('.timer');\r\n      var timer =  document.querySelector('.timer-svg__circle');\r\n\r\n      this.timerId = setInterval(function() {\r\n        self.timeToTest--;\r\n\r\n        if (self.timeToTest < 11) {\r\n          display.style.color = '#dc3545';\r\n          timer.style.stroke = '#dc3545';\r\n        }\r\n\r\n        if (self.timeToTest === 0) {\r\n          clearInterval(self.timerId);\r\n          setTimeout(function(){\r\n            self.nextStep();\r\n          }, 1000)\r\n        }\r\n      }, 1000);\r\n    },\r\n\r\n    stopTimer() {\r\n      clearInterval(this.timerId);\r\n    },\r\n\r\n    nextStep() {\r\n        this.$emit('next-step');\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.autoStart) {\r\n      this.startTimer();\r\n      document.querySelector('.timer-svg__circle').style.animation = 'countdown ' + this.timeToTest + 's linear forwards';\r\n    }\r\n  }\r\n}\r\n\r\n",{"version":3,"sources":["Timer.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Timer.vue","sourceRoot":"components","sourcesContent":["<template>\r\n  <div class=\"col-2 col-lg-1 d-flex justify-content-start align-items-center\">\r\n    <div class=\"timer\">{{timerStr}}</div>\r\n    <svg class=\"timer-svg\">\r\n      <circle r=\"23\" cx=\"30\" cy=\"30\" class=\"timer-svg__circle\"></circle>\r\n    </svg>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      timeToTest: this.minute * 60,\r\n      timerId: '',\r\n    }\r\n  },\r\n  computed: {\r\n    timerStr() {\r\n      let minutes = parseInt(this.timeToTest / 60, 10)\r\n      let seconds = parseInt(this.timeToTest % 60, 10);\r\n\r\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\r\n      seconds = seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n      let result = minutes + \":\" + seconds;\r\n\r\n      return result;\r\n    }\r\n  },\r\n  props: {\r\n    minute: {\r\n      type: Number,\r\n      default: 1\r\n    },\r\n    autoStart: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  methods: {\r\n    startTimer() {\r\n      var self = this;\r\n      this.timeToTest = this.minute * 60;\r\n      var display = document.querySelector('.timer');\r\n      var timer =  document.querySelector('.timer-svg__circle');\r\n\r\n      this.timerId = setInterval(function() {\r\n        self.timeToTest--;\r\n\r\n        if (self.timeToTest < 11) {\r\n          display.style.color = '#dc3545';\r\n          timer.style.stroke = '#dc3545';\r\n        }\r\n\r\n        if (self.timeToTest === 0) {\r\n          clearInterval(self.timerId);\r\n          setTimeout(function(){\r\n            self.nextStep();\r\n          }, 1000)\r\n        }\r\n      }, 1000);\r\n    },\r\n\r\n    stopTimer() {\r\n      clearInterval(this.timerId);\r\n    },\r\n\r\n    nextStep() {\r\n        this.$emit('next-step');\r\n    }\r\n  },\r\n  mounted() {\r\n    if (this.autoStart) {\r\n      this.startTimer();\r\n      document.querySelector('.timer-svg__circle').style.animation = 'countdown ' + this.timeToTest + 's linear forwards';\r\n    }\r\n  }\r\n}\r\n\r\n</script>\r\n<style lang=\"scss\">\r\n@import \"../scss/form.scss\"\r\n\r\n</style>\r\n"]}]}